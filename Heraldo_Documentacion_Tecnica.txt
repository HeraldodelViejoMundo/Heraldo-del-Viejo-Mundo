# Documentaci√≥n T√©cnica Completa
## Proyecto: El Heraldo del Viejo Mundo
### Estado: operativo con automatizaci√≥n total
### Fecha: 9 de junio de 2025

---

## ‚ú® Prop√≥sito del sistema
Generar autom√°ticamente un blog actualizado sobre Warhammer: The Old World (TOW), a partir de:
- Noticias de **Warhammer Community**.
- V√≠deos relevantes de **YouTube**.

El sistema analiza, resume, traduce y redacta los contenidos con GPT-4, generando archivos `.md` compatibles con Jekyll y public√°ndolos autom√°ticamente en GitHub Pages.

---

## üìÅ Estructura de directorios

- `/opt/oldworldbot/`
  - `video_bot.py` ‚Üí Bot de v√≠deos (YouTube)
  - `bot.py` ‚Üí Bot de art√≠culos (Warhammer Community)
  - `run_bot.sh` ‚Üí Publicaci√≥n autom√°tica de art√≠culos
  - `logs/` ‚Üí Contiene `video_bot.log` y `run_bot.log`
  - `.env` ‚Üí Variables de entorno: `OPENAI_API_KEY`, `YOUTUBE_API_KEY`

- `/opt/Heraldo-del-Viejo-Mundo/`
  - `_posts/` ‚Üí Donde se guardan y publican los `.md`
  - `index.html` ‚Üí Ra√≠z del blog con paginaci√≥n activa
  - `Gemfile`, `Gemfile.lock` ‚Üí Gestiona dependencias (Jekyll, plugins)
  - `_config.yml` ‚Üí Configuraci√≥n de Jekyll
  - `.github/workflows/deploy.yml` ‚Üí GitHub Actions para publicaci√≥n est√°tica

---

## üß™ Tecnolog√≠as y dependencias

- **Lenguaje:** Python 3.10 (venv)
- **Servidor:** Hetzner Cloud, Ubuntu 22.04 LTS
- **Blog:** Jekyll (est√°tico), desplegado con GitHub Pages
- **Scraping:** Playwright + BeautifulSoup4
- **Procesamiento:** GPT-4 via OpenAI API
- **Publicaci√≥n:** `git` + GitHub Actions
- **Dependencias Ruby:** `jekyll`, `jekyll-paginate`, `minima`

---

## ‚è∞ Automatizaci√≥n con `cron`

0 * * * * /opt/oldworldbot/venv/bin/python3 /opt/oldworldbot/video_bot.py >> /opt/oldworldbot/logs/video_bot.log 2>&1
5 * * * * /opt/oldworldbot/run_bot.sh >> /opt/oldworldbot/logs/run_bot.log 2>&1

yaml
Copiar
Editar

Orden garantizado:
1. A `:00` se publican los v√≠deos.
2. A `:05` se publican los art√≠culos.

---

## üõ† video_bot.py

- Analiza canales de YouTube aprobados.
- Filtra por fecha y tema (TOW, Old World).
- Descarta duplicados por nombre de archivo (`YYYY-MM-DD-yt-<id>.md`).
- Resume y redacta con GPT-4.
- Publica directamente en `_posts/` y hace `git commit` + `push`.
- Ya no depende de `run_bot.sh`.

**Avances:**
- Publicaci√≥n directa y autom√°tica.
- Log independiente (`logs/video_bot.log`).

---

## üõ† bot.py

- Scrapea la secci√≥n "The Old World" de Warhammer Community.
- Extrae HTML con Playwright y trafilatura.
- Usa GPT-4 para generar cuerpo, t√≠tulo, resumen y conclusiones.
- Evita duplicados mirando `title_original` de los `.md` en `_posts/`.
- Publica en `posts/`, luego `run_bot.sh` los mueve.

**Filtro activo:** solo procesa art√≠culos posteriores al 1 de mayo de 2025.

---

## üõ† run_bot.sh

- Ejecuta `bot.py`.
- Mueve los `.md` generados a `_posts/`.
- Hace `git commit` y `push`.

**Cambio importante:** se elimin√≥ el `rsync` que copiaba de `_posts/` a `posts/`. Ya no es necesario tras la independencia de `video_bot.py`.

---

## üí° Problema resuelto: paginaci√≥n rota

### S√≠ntoma:
- Blog mostraba solo 30 entradas.
- El enlace ‚ÄúSiguientes ‚Üí‚Äù no aparec√≠a, aunque `/page2/` exist√≠a.

### Causa:
- `jekyll-paginate` no se activaba en GitHub Pages porque faltaba `Gemfile.lock`.
- Exist√≠a un `index.md` que bloqueaba `index.html`.

### Soluci√≥n:
- Se ejecut√≥ `bundle install` y se subi√≥ `Gemfile.lock`.
- Se elimin√≥ `index.md`.
- Se verific√≥ el uso correcto de `paginator.posts` y `paginator.next_page`.

Resultado: **paginaci√≥n completamente funcional.**

---

## üîç Comprobaciones √∫tiles

```bash
ls -lt /opt/Heraldo-del-Viejo-Mundo/_posts/             # ver archivos generados
tail -n 50 /opt/oldworldbot/logs/video_bot.log          # log de v√≠deos
tail -n 50 /opt/oldworldbot/logs/run_bot.log            # log de art√≠culos
crontab -l                                              # ver tareas programadas
üåç Publicaci√≥n y despliegue
Blog Jekyll con tema minima.

Paginaci√≥n activada con:

yaml
Copiar
Editar
paginate: 30
paginate_path: "/page:num"
plugins:
  - jekyll-paginate
GitHub Actions toma los cambios en main y publica v√≠a GitHub Pages.

üöß Tareas futuras
Reescribir art√≠culos antiguos mal generados.

Detectar cambios parciales en art√≠culos.

Ampliar ventana de scraping si se quiere regenerar el pasado.

A√±adir hashes o versi√≥n para evitar duplicados l√≥gicos.

Crear dashboard de control.

‚úÖ Estado actual
V√≠deos y art√≠culos se publican autom√°ticamente.

La paginaci√≥n funciona.

Los logs est√°n separados.

El sistema es replicable y mantenible por cualquier desarrollador.
